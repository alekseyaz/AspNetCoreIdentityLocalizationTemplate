@using Microsoft.AspNetCore.Builder
@using Microsoft.AspNetCore.Localization
@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.Extensions.Options


@inject IViewLocalizer Localizer
@inject IOptions<RequestLocalizationOptions> LocOptions
@using AspNetCoreIdentityLocalization.Resources
@inject LocService SharedLocalizer
@{

    var requestCulture = Context.Features.Get<IRequestCultureFeature>();
    var cultureItems = LocOptions.Value.SupportedUICultures
        .Select(c => new SelectListItem { Value = c.Name, Text = c.TextInfo.ToTitleCase(c.NativeName.Contains('(') ? c.NativeName.Substring(0, c.NativeName.IndexOf('(')) : c.NativeName) })
        .ToList();

    var location = new Uri($"{Context.Request.Scheme}://{Context.Request.Host}{Context.Request.Path}{Context.Request.QueryString}");

    var url = location.AbsoluteUri;
    var returnUrlForLanguageSwitch = Context.Request.Path;

    if (Context.Request.QueryString.HasValue)
    {
        returnUrlForLanguageSwitch = $"{Context.Request.Path}{Context.Request.QueryString.Value}";
    }
}

<div title="@Localizer["Request culture provider:"] @requestCulture?.Provider?.GetType().Name">
    <div class="dropdown">
        <a class="dropdown-toggle nav-link text-dark" href="#" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            @cultureItems.Where(o => o.Value == requestCulture.RequestCulture.UICulture.Name).FirstOrDefault().Text
        </a>
        <div class="dropdown-menu">
            @foreach (var culture in cultureItems)
            {
                if (culture.Value != requestCulture.RequestCulture.UICulture.Name)
                {
                    <a asp-controller="Home" asp-action="SetLanguage" asp-route-culture="@culture.Value" asp-route-returnUrl="@returnUrlForLanguageSwitch" class="dropdown-item">
                        @culture.Text
                    </a>
                }
            }
        </div>
    </div>
</div>